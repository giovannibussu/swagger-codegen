@org.codehaus.jackson.annotate.JsonPropertyOrder({
{{#vars~}}
"{{baseName}}",
{{/vars~}}
})
public class {{classname}} extends JSONSerializable {
  {{#vars~}}
    {{#is this 'enum'}}
    {{#isNot this 'container'}}
{{>enumClass}}
    {{/isNot}}
    {{/is~}}
    {{#is items 'enum'~}}
      {{#items~}}
      {{#isNot this 'container'~}}
{{>enumClass}}
      {{/isNot~}}
      {{/items~}}
    {{/is}}
  {{#jackson~}}
  @JsonProperty("{{baseName}}")
  {{/jackson~}}
  {{#gson~}}
  @SerializedName("{{baseName}}")
  {{/gson~}}
  {{#is this 'container'~}}
  private {{{datatypeWithEnum}}} {{name}}{{#required}} = {{{defaultValue}}}{{/required}}{{^required}} = null{{/required}};
  {{/is~}}
  {{#isNot this 'container'~}}
  private {{{datatypeWithEnum}}} {{name}} = {{{defaultValue}}};
  {{/isNot~}}
  {{/vars}}
  {{#vars~}}
  /**{{#description}}
   * {{{description}}}{{/description}}{{#minimum}}
   * minimum: {{minimum}}{{/minimum}}{{#maximum}}
   * maximum: {{maximum}}{{/maximum}}
   **/
  public {{classname}} {{name}}({{{datatypeWithEnum}}} {{name}}) {
    this.{{name}} = {{name}};
    return this;
  }

  @JsonProperty("{{baseName}}")
  public {{{datatypeWithEnum}}} {{getter}}() {
    return {{name}};
  }
  public void {{setter}}({{{datatypeWithEnum}}} {{name}}) {
    this.{{name}} = {{name}};
  }

  {{/vars~}}

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    {{classname}} {{classVarName}} = ({{classname}}) o;{{#has this 'vars'}}
    return {{#vars}}Objects.equals({{name}}, {{classVarName}}.{{name}}){{#has this 'more'}} &&
        {{/has}}{{#hasNot this 'more'}};{{/hasNot}}{{/vars}}{{/has}}{{#hasNot this 'vars'}}
    return true;{{/hasNot}}
  }

  @Override
  public int hashCode() {
    return Objects.hash({{#vars}}{{name}}{{#has this 'more'}}, {{/has}}{{/vars}});
  }

  public static {{classname}} parse(String json) {
    return ({{classname}}) parse(json, {{classname}}.class);
  }

  @Override
  public String getJsonIdFilter() {
    return "{{classVarName}}";
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class {{classname}} {\n");
    {{#parent}}sb.append("    ").append(toIndentedString(super.toString())).append("\n");{{/parent}}
    {{#vars}}sb.append("    {{name}}: ").append(toIndentedString({{name}})).append("\n");
    {{/vars}}sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
